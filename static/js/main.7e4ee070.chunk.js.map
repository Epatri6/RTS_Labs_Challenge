{"version":3,"sources":["Components/Question/Question.js","Utils/utils.js","Challenge_Answers/answers.js","Components/Question_Bar/QuestionBar.js","Components/App/App.js","index.js"],"names":["Question","state","inputs","answer","props","question","setInput","input","idx","setState","usePreset","e","preset","preventDefault","callFunction","callback","renderInputField","field","key","className","htmlFor","id","onChange","currentTarget","value","defaultValue","required","renderPresetButton","name","onClick","renderInputForm","fields","onSubmit","map","type","this","presets","React","Component","defaultProps","array","num","replace","split","i","length","isNaN","above","below","forEach","ele","numAboveAndBelow","string","factor","factorIdx","substring","rotateString","QuestionBar","renderQuestionButtons","changeQuestion","questions","App","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7e4ee070.chunk.js","sourcesContent":["import React from 'react';\r\n/**\r\n * Renders a challenge question to the screen\r\n */\r\nexport default class Question extends React.Component {\r\n    \r\n    \r\n    static defaultProps = {\r\n        question: {},\r\n    };\r\n\r\n    state = {\r\n        inputs: [],\r\n        answer: this.props.question.answer\r\n    }\r\n\r\n    //Stores input in state\r\n    setInput = (input, idx) => {\r\n        const inputs = [...this.state.inputs];\r\n        inputs[idx] = input;\r\n        this.setState({\r\n            inputs: inputs,\r\n        })\r\n    }\r\n\r\n    //Loads a preset answer for a question\r\n    usePreset = (e, preset) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            inputs: preset.inputs,\r\n        });\r\n    }\r\n\r\n    //Runs the answer function for a question and stores the answer\r\n    callFunction = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            answer: this.props.question.callback(...this.state.inputs),\r\n        });\r\n    }\r\n\r\n    //Renders question inputs\r\n    renderInputField = (field, idx) => {\r\n        return (\r\n            <div key={idx} className='row'>\r\n                <label className='cell' htmlFor={`${field}-input`}>{`${field}:`}</label>\r\n                <input className='cell' id={`${field}-input`} \r\n                onChange={(e) => this.setInput(e.currentTarget.value, idx)} \r\n                defaultValue={this.state.inputs[idx]}\r\n                required/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //Renders buttons to load preset tests\r\n    renderPresetButton = (preset, idx) => {\r\n        const {name} = preset;\r\n        return (\r\n            <button key={idx} onClick={(e) => this.usePreset(e, preset)}>{name}</button>\r\n        );\r\n    }\r\n\r\n    //Renders input form\r\n    renderInputForm = (fields) => {\r\n        return (\r\n            <form className='flex-container' onSubmit={(e) => this.callFunction(e)}>\r\n                <div className='table-container'>\r\n                    {fields.map((field, idx) => this.renderInputField(field, idx))}\r\n                </div>\r\n                <button type='submit'>Submit</button>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const {question, fields, presets} = this.props.question;\r\n        const {answer} = this.state;\r\n        return (\r\n            <div className='flex-container'>\r\n                {/** Question Box*/}\r\n                <div className='text-box'>\r\n                    <h2>Question</h2>\r\n                    {question}\r\n                </div>\r\n                {/** Input Form */}\r\n                {fields && this.renderInputForm(fields)}\r\n                {/** Answer Box */}\r\n                <div className='text-box'>\r\n                    <h2>Answer</h2>\r\n                    {answer}\r\n                </div>\r\n                {/** Preset Test Buttons */}\r\n                {presets && presets.map((preset, idx) => this.renderPresetButton(preset, idx))}\r\n            </div>\r\n        );\r\n    }\r\n}","import {numAboveAndBelow, rotateString} from '../Challenge_Answers/answers';\r\n/**\r\n * Stores data for each challenge question\r\n */\r\nexport default [\r\n    //Question 1\r\n    {\r\n        question: 'Print the number of integers in an array that are above the given input and the number that are below, e.g. for the array [1, 5, 2, 1, 10] with input 6, print “above: 1, below: 4”.',\r\n        fields: ['Number array (comma seperated list)', 'Number'],\r\n        presets: [\r\n            {\r\n                name: 'Basic test',\r\n                inputs: ['1,2,3,4,5,6,7,8,9,10', '5'],\r\n            },\r\n            {\r\n                name: 'Lots of repeats',\r\n                inputs: ['1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3', '2'],\r\n            },\r\n            {\r\n                name: 'Negatives',\r\n                inputs: ['-1, -2, -3, -4, -5, -6, -7, -8, -9, -10', '-5'],\r\n            },\r\n        ],\r\n        callback: (array, num) => {\r\n            //Filter whitespace and form number array\r\n            array = array.replace(/\\s+/g, '');\r\n            array = array.split(',');\r\n            //input validation\r\n            for (let i = 0; i < array.length; i++) {\r\n                if(isNaN(array[i])) {\r\n                    return 'Array input must be a comma seperated list of numbers';\r\n                }\r\n            }\r\n            if(isNaN(num)) {\r\n                return 'Number input must be a number'\r\n            }\r\n            return numAboveAndBelow(array, num);\r\n        },\r\n    },\r\n    //Question 2\r\n    {\r\n        question: 'Rotate the characters in a string by a given input and have the overflow appear at the beginning, e.g. “MyString” rotated by 2 is “ngMyStri”.',\r\n        fields: ['String', 'Rotation Amount'],\r\n        presets: [\r\n            {\r\n                name: 'Basic test',\r\n                inputs: ['MyString', '2'],\r\n            },\r\n            {\r\n                name: 'Factor larger than string',\r\n                inputs: ['MyString', '11'],\r\n            },\r\n            {\r\n                name: 'Negative Rotation',\r\n                inputs: ['MyString', '-7'],\r\n            },\r\n        ],\r\n        callback: (string, factor) => {\r\n            //input validation\r\n            if(isNaN(factor)) {\r\n                return 'Rotation Amount input must be a number'\r\n            }\r\n            return rotateString(string, factor);\r\n        },\r\n    },\r\n    //Question 3\r\n    {\r\n        question: 'If you could change 1 thing about your favorite framework/language/platform (pick one), what would it be?',\r\n        answer: \"JavaScript is a weakly-typed language. While I acknowledge the pros of this such as easy data manipulation, easy random object creation, and lack of need to compile, I simply do not value it as much as strongly typed variables.\\n\\n The obvious first reason is catching bugs. This function is taking a variable called string, so presumably I'm getting a string? No, it may be an object for all I really know.\\n\\n I'd take strongly-typed variables purely for readablity regardless of effectiveness of finding bugs. It may result in slightly more typing, but I'd know what type of data is getting manipulated regardless of potentially poor variable naming.\\n\\n Luckily I'm not alone in this thought and tools such as TypeScript exist to mitigate these frustrations.\",\r\n    },\r\n];","// #``1  Print the number of integers in an array that are above the given input and the number that are below,\r\n// e.g. for the array [1, 5, 2, 1, 10] with input 6, print “above: 1, below: 4”.\r\n\r\n/**\r\n * Takes an array and a number then returns a string with the counts of number of elements\r\n * above and below that number.\r\n * \r\n * My strategy: \r\n * Go through each element and increase above/below count as needed.\r\n * O(n) performance.\r\n */\r\nexport function numAboveAndBelow(array, num) {\r\n    let above = 0;\r\n    let below = 0;\r\n    array.forEach(ele => {\r\n        if(ele === num) {\r\n            return;\r\n        }\r\n        (ele > num) ? above++ : below++;\r\n    })\r\n    return `above: ${above}, below: ${below}`;\r\n}\r\n\r\n// #2  Rotate the characters in a string by a given input and have the overflow appear at the beginning, \r\n//e.g. “MyString” rotated by 2 is “ngMyStri”.\r\n\r\n/**\r\n * Rotates a string by a given factor\r\n * \r\n * My strategy: \r\n * The desired result is basically just two substrings combined -\r\n * one starting (factor) number of characters from the end of the string to the end of the sting\r\n * and one starting at the beginning of the string to that point.\r\n * \r\n * Considerations: \r\n * If factor or string length is 0 we shouldn't bother doing anything\r\n * Factor may be larger than the string's length\r\n * What if factor is negative?\r\n * \r\n * Performance: O(n)\r\n */\r\nexport function rotateString(string, factor) {\r\n    if(factor === 0 || string.length === 0) {\r\n        return string;\r\n    }\r\n    factor = factor % string.length;\r\n    //Negative factors are the same as corresponding positive factors\r\n    if(factor < 0) {\r\n        factor = string.length + factor;\r\n    }\r\n    const factorIdx = (string.length - factor);\r\n    return string.substring(factorIdx, string.length) + string.substring(0, factorIdx);\r\n}\r\n\r\n// #3  If you could change 1 thing about your favorite framework/language/platform (pick one), what would it be?\r\n\r\n/**\r\n * JavaScript is a weakly-typed language. While I acknowledge the pros of this such as easy data manipulation,\r\n * easy random object creation, and lack of need to compile, I simply do not value it as much as strongly typed variables.\r\n * \r\n * The obvious first reason is catching bugs.\r\n * This function is taking a variable called string, so presumably I'm getting a string?\r\n * No, it may be an object for all I really know.\r\n * \r\n * I'd take strongly-typed variables purely for readablity regardless of effectiveness of finding bugs.\r\n * It may result in slightly more typing, but I'd know what type of data is getting manipulated\r\n * regardless of potentially poor variable naming.\r\n * \r\n * Luckily I'm not alone in this thought and tools such as TypeScript exist to mitigate these frustrations.\r\n */","import React from 'react';\r\nimport questions from '../../Utils/utils';\r\n/**\r\n * Displays a row of buttons for question navigation\r\n */\r\nexport default class QuestionBar extends React.Component {\r\n\r\n    static defaultProps = {\r\n        changeQuestion: () => {},\r\n    };\r\n\r\n    renderQuestionButtons = (question, idx) => {\r\n        return (\r\n            <button key={idx} onClick={() => this.props.changeQuestion(question)}>{`Question ${idx + 1}`}</button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='flex-container-row'>\r\n                {questions.map((question, idx) => this.renderQuestionButtons(question, idx))}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Question from '../Question/Question';\r\nimport QuestionBar from '../Question_Bar/QuestionBar';\r\n/**\r\n * Shows default page or current question\r\n */\r\nexport default class App extends React.Component {\r\n\r\n    state = {\r\n        question: {},\r\n    };\r\n\r\n    //Changes question presented\r\n    changeQuestion = (question) => {\r\n        this.setState({question});\r\n    }\r\n\r\n    render() {\r\n        const {question} = this.state;\r\n        console.log(question);\r\n        return (\r\n            <div className='wrapper flex-container'>\r\n                <h1>RTS Labs Challenge Questions</h1>\r\n                <QuestionBar changeQuestion={this.changeQuestion}/>\r\n                {question.question && <Question key={question.question} question={question}/>}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './Components/App/App';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}