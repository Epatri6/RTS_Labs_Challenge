(this["webpackJsonpreact-playground"]=this["webpackJsonpreact-playground"]||[]).push([[0],{13:function(e,t,n){},14:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),i=n(7),s=n.n(i),o=n(1),u=n(2),c=n(4),l=n(3),p=n(5),m=function(e){Object(c.a)(n,e);var t=Object(l.a)(n);function n(){var e;Object(o.a)(this,n);for(var a=arguments.length,i=new Array(a),s=0;s<a;s++)i[s]=arguments[s];return(e=t.call.apply(t,[this].concat(i))).state={inputs:[],answer:e.props.question.answer},e.setInput=function(t,n){var a=Object(p.a)(e.state.inputs);a[n]=t,e.setState({inputs:a})},e.usePreset=function(t,n){t.preventDefault(),e.setState({inputs:n.inputs})},e.callFunction=function(t){var n;t.preventDefault(),e.setState({answer:(n=e.props.question).callback.apply(n,Object(p.a)(e.state.inputs))})},e.renderInputField=function(t,n){return r.a.createElement("div",{key:n,className:"row"},r.a.createElement("label",{className:"cell",htmlFor:"".concat(t,"-input")},"".concat(t,":")),r.a.createElement("input",{className:"cell",id:"".concat(t,"-input"),onChange:function(t){return e.setInput(t.currentTarget.value,n)},defaultValue:e.state.inputs[n],required:!0}))},e.renderPresetButton=function(t,n){var a=t.name;return r.a.createElement("button",{key:n,onClick:function(n){return e.usePreset(n,t)}},a)},e.renderInputForm=function(t){return r.a.createElement("form",{className:"flex-container",onSubmit:function(t){return e.callFunction(t)}},r.a.createElement("div",{className:"table-container"},t.map((function(t,n){return e.renderInputField(t,n)}))),r.a.createElement("button",{type:"submit"},"Submit"))},e}return Object(u.a)(n,[{key:"render",value:function(){var e=this,t=this.props.question,n=t.question,a=t.fields,i=t.presets,s=this.state.answer;return r.a.createElement("div",{className:"flex-container"},r.a.createElement("div",{className:"text-box"},r.a.createElement("h2",null,"Question"),n),a&&this.renderInputForm(a),r.a.createElement("div",{className:"text-box"},r.a.createElement("h2",null,"Answer"),s),i&&i.map((function(t,n){return e.renderPresetButton(t,n)})))}}]),n}(r.a.Component);m.defaultProps={question:{}};var f=[{question:"Print the number of integers in an array that are above the given input and the number that are below, e.g. for the array [1, 5, 2, 1, 10] with input 6, print \u201cabove: 1, below: 4\u201d.",fields:["Number array (comma seperated list)","Number"],presets:[{name:"Basic test",inputs:["1,2,3,4,5,6,7,8,9,10","5"]},{name:"Lots of repeats",inputs:["1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3","2"]},{name:"Negatives",inputs:["-1, -2, -3, -4, -5, -6, -7, -8, -9, -10","-5"]}],callback:function(e,t){e=(e=e.replace(/\s+/g,"")).split(",");for(var n=0;n<e.length;n++)if(isNaN(e[n]))return"Array input must be a comma seperated list of numbers";return isNaN(t)?"Number input must be a number":function(e,t){var n=0,a=0;return e.forEach((function(e){e!==t&&(e>t?n++:a++)})),"above: ".concat(n,", below: ").concat(a)}(e,t)}},{question:"Rotate the characters in a string by a given input and have the overflow appear at the beginning, e.g. \u201cMyString\u201d rotated by 2 is \u201cngMyStri\u201d.",fields:["String","Rotation Amount"],presets:[{name:"Basic test",inputs:["MyString","2"]},{name:"Factor larger than string",inputs:["MyString","11"]},{name:"Negative Rotation",inputs:["MyString","-7"]}],callback:function(e,t){return isNaN(t)?"Rotation Amount input must be a number":function(e,t){if(0===t||0===e.length)return e;(t%=e.length)<0&&(t=e.length+t);var n=e.length-t;return e.substring(n,e.length)+e.substring(0,n)}(e,t)}},{question:"If you could change 1 thing about your favorite framework/language/platform (pick one), what would it be?",answer:"JavaScript is a weakly-typed language. While I acknowledge the pros of this such as easy data manipulation, easy random object creation, and lack of need to compile, I simply do not value it as much as strongly typed variables.\n\n The obvious first reason is catching bugs. This function is taking a variable called string, so presumably I'm getting a string? No, it may be an object for all I really know.\n\n I'd take strongly-typed variables purely for readablity regardless of effectiveness of finding bugs. It may result in slightly more typing, but I'd know what type of data is getting manipulated regardless of potentially poor variable naming.\n\n Luckily I'm not alone in this thought and tools such as TypeScript exist to mitigate these frustrations."}],g=function(e){Object(c.a)(n,e);var t=Object(l.a)(n);function n(){var e;Object(o.a)(this,n);for(var a=arguments.length,i=new Array(a),s=0;s<a;s++)i[s]=arguments[s];return(e=t.call.apply(t,[this].concat(i))).renderQuestionButtons=function(t,n){return r.a.createElement("button",{key:n,onClick:function(){return e.props.changeQuestion(t)}},"Question ".concat(n+1))},e}return Object(u.a)(n,[{key:"render",value:function(){var e=this;return r.a.createElement("div",{className:"flex-container-row"},f.map((function(t,n){return e.renderQuestionButtons(t,n)})))}}]),n}(r.a.Component);g.defaultProps={changeQuestion:function(){}};var h=function(e){Object(c.a)(n,e);var t=Object(l.a)(n);function n(){var e;Object(o.a)(this,n);for(var a=arguments.length,r=new Array(a),i=0;i<a;i++)r[i]=arguments[i];return(e=t.call.apply(t,[this].concat(r))).state={question:{}},e.changeQuestion=function(t){e.setState({question:t})},e}return Object(u.a)(n,[{key:"render",value:function(){var e=this.state.question;return console.log(e),r.a.createElement("div",{className:"wrapper flex-container"},r.a.createElement("h1",null,"RTS Labs Challenge Questions"),r.a.createElement(g,{changeQuestion:this.changeQuestion}),e.question&&r.a.createElement(m,{key:e.question,question:e}))}}]),n}(r.a.Component);n(13);s.a.render(r.a.createElement(h,null),document.getElementById("root"))},8:function(e,t,n){e.exports=n(14)}},[[8,1,2]]]);
//# sourceMappingURL=main.7e4ee070.chunk.js.map